// Distributed under the MIT License.
// See LICENSE.txt for details.

#pragma once

#include <cstddef>
#include <tuple>
#include <utility>

#include "DataStructures/DataBox/DataBox.hpp"
#include "Evolution/Systems/Cce/Actions/SendPsi0ToEvolution.hpp"
#include "Evolution/Systems/Cce/NewmanPenrose.hpp"
#include "Evolution/Systems/Cce/PreSwshDerivatives.hpp"

#include "NumericalAlgorithms/Spectral/SwshFiltering.hpp"

namespace Cce {
namespace Actions {

/*!
 * \ingroup ActionsGroup
 * \brief Calculates \f$\Psi_0\f$ and its radial derivative
 * \f$\partial_\underline{\lambda}\Psi_0\f$ on the inner boundary of
 * CCE domain.
 *
 * \details This action is to be called after `Tags::BondiJ` has been updated.
 * Note that `Tags::BondiJ` is in the asymptotically inertial frame, while the
 * returned \f$\Psi_0\f$ and its radial derivative are in the Cauchy frame.
 * \f$\underline \lambda\f$ is an affine parameter along the null
 * rays generated by \f$l\f$, see Eq. (19a) in Moxon et al, arXiv:2007.01339.
 */
struct CalculatePsi0 {
  using const_global_cache_tags = tmpl::list<Tags::LMax>;

  template <typename DbTags, typename... InboxTags, typename Metavariables,
            typename ArrayIndex, typename ActionList,
            typename ParallelComponent>
  static std::tuple<db::DataBox<DbTags>&&> apply(
      db::DataBox<DbTags>& box,
      const tuples::TaggedTuple<InboxTags...>& /*inboxes*/,
      const Parallel::GlobalCache<Metavariables>& /*cache*/,
      const ArrayIndex& /*array_index*/, const ActionList /*meta*/,
      const ParallelComponent* const /*meta*/) noexcept {
    const size_t l_max = db::get<Tags::LMax>(box);
    db::mutate_apply<Interpolate_BondiJ>(make_not_null(&box));
    db::mutate_apply<PreSwshDerivatives<Tags::Dy<
        Tags::BondiJ_Cauchyview>>>(make_not_null(&box));
    db::mutate_apply<PreSwshDerivatives<Tags::Dy<Tags::Dy<
        Tags::BondiJ_Cauchyview>>>>( make_not_null(&box));
    db::mutate_apply<VolumeWeyl<Tags::Psi0Match>>(make_not_null(&box));
    db::mutate_apply<PreSwshDerivatives<Tags::Dy<
        Tags::Psi0Match>>>(make_not_null(&box));
    db::mutate_apply<BoundaryWeyl>(make_not_null(&box));

    db::mutate<Tags::BoundaryValue<Tags::Psi0Match>>(
        make_not_null(&box),
        [
          &l_max
        ](const gsl::not_null<Scalar<SpinWeighted<ComplexDataVector, 2>>*>
              psi_0_bound) noexcept {
          Spectral::Swsh::filter_swsh_boundary_quantity(
              make_not_null(&get(*psi_0_bound)), l_max, l_max-3);
        });

    return {std::move(box)};
  }
};

template <typename CceComponent>
struct TransferPsi0 {
  template <typename DbTags, typename... InboxTags, typename Metavariables,
            typename ArrayIndex, typename ActionList,
            typename ParallelComponent>
  static auto apply(db::DataBox<DbTags>& box,
                    const tuples::TaggedTuple<InboxTags...>& /*inboxes*/,
                    Parallel::GlobalCache<Metavariables>& cache,
                    const ArrayIndex& /*array_index*/,
                    const ActionList /*meta*/,
                    const ParallelComponent* const /*meta*/) noexcept {
    Parallel::simple_action<Actions::SendPsi0<Metavariables, CceComponent>>(
        Parallel::get_parallel_component<CceComponent>(cache),
        db::get<::Tags::TimeStepId>(box)
        );
    return std::forward_as_tuple(std::move(box));
  }
};

} // namespace Actions
} // namespace Cce
